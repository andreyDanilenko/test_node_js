import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import path from 'path';

import morgan from 'morgan';
import { createServer } from 'http';
import { Server } from 'socket.io';
import routes from './routes';
import { getAllModelsData } from './controllers/dump';

const app = express();
const server = createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// middleware
app.use(helmet());
app.use(cors());
app.use(morgan('combined'));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

app.use((req, res, next) => {
  (req as any).io = io;
  next();
});

app.use(routes);


const clients = new Map();
io.on('connection', (socket) => {
  console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);
  clients.set(socket.id, { connected: new Date() });

  socket.emit('server_message', {
    type: 'welcome',
    message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä!',
    clientsCount: clients.size
  });

  socket.broadcast.emit('server_message', {
    type: 'user_joined',
    message: `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è`,
    clientId: socket.id,
    clientsCount: clients.size
  });

  io.emit('clients_count', clients.size);

socket.on('client_message', (msg) => {
  console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç', socket.id, ':', msg);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
  if (typeof msg === 'string') {
    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    io.emit('server_message', {
      type: 'message',
      message: msg,
      clientId: socket.id,
      timestamp: new Date().toLocaleTimeString()
    });

    if (msg.toLowerCase() === 'exit') {
      socket.emit('server_message', {
        type: 'goodbye',
        message: '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'
      });
      socket.disconnect();
    }
  } else if (typeof msg === 'object' && msg !== null) {
    // –û–±—ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è sticky notes)
    io.emit('server_message', {
      type: 'object_message',
      data: msg,
      clientId: socket.id,
      timestamp: new Date().toLocaleTimeString()
    });
  }
});

  socket.on('disconnect', () => {
    console.log('üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    clients.delete(socket.id);

    io.emit('server_message', {
      type: 'user_left',
      message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –≤—ã—à–µ–ª`,
      clientId: socket.id,
      clientsCount: clients.size
    });

    io.emit('clients_count', clients.size);
  });

  socket.on('error', (error) => {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error);
  });
});

export { app, server, io };
